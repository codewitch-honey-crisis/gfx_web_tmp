import React, { useState } from 'react';

const toHex = (code) => {
    let result = code.toString(16);
    if (result.length == 1) {
        return "0" + result;
    }
    return result;
}
const generateText = (data, startSpacing = 0) => {
    let result = "\"";
    const view = new DataView(data);
    let j = startSpacing;
    for (var i = 0; i < view.byteLength; i++) {
        if (i > 0 && 0 == (j % 80) && i < i < view.byteLength - 1) {
            result += "\"\r\n    \"";
        }
        var charcode = view.getUint8(i);
        if (charcode < 0x80) {
            const ch = String.fromCharCode(charcode);
            switch (ch) {
                case '\r':
                    result += "\\r";
                    break;
                case '\n':
                    result += "\\n";
                    if (i < view.byteLength - 1) {
                        result += "\"\r\n    \"";
                    }
                    j = 0;
                    break;
                case '\t':
                    result += "\\t";
                    break;
                case '"':
                    result += "\\\"";
                    break;
                case '\\':
                    result += "\\\\";
                    break;
                default:
                    result += ch;
                    break;
            }
        }
        else {
            result += `\\x${toHex(charcode)}`;
        }
        ++j;
    }
    return result + "\"";
}
const generateBinary = (data) => {
    let result = "";
    const view = new DataView(data);
    for (let i = 0; i < view.byteLength; ++i) {
        if (0 == (i % (30))) {
            if (i < view.byteLength - 1) {
                result += "\r\n    ";
            } else {
                result += "\r\n";
            }
        }
        let append = ("0x" + toHex(view.getUint8(i)));
        if (i < view.byteLength - 1) {
            append += ", ";
        }
        result += append;

    }
    return result;
}

const generateStringLiteral = (name, data, isStatic) => {
    if (isStatic) {
        return `static const char* ${name} = ${generateText(data, 18 + name.length)};`;
    }
    return `const char* ${name} = ${generateText(data, 18 + name.length)};`;

}

const generateByteArrayLiteral = (name, data, isStatic) => {
    if (isStatic) {
        return `static const uint8_t ${name}[] = {${generateBinary(data)}};`;
    }
    return `const uint8_t ${name}[] = {${generateBinary(data)}};`;

}
const toIdentifier = (name) => {
    let result = "";
    if (name.length == 0) {
        return "_";
    }
    if (name[0] >= '0' && name[0] <= '9') {
        result = "_";
    }
    for (let i = 0; i < name.length; ++i) {
        if ((name[i] >= '0' && name[i] <= '9') || (name[i] >= 'A' && name[i] <= 'Z') || (name[i] >= 'a' && name[i] <= 'z')) {
            result += name[i];
        } else {
            result += "_";
        }
    }
    return result;
}
const checkIsWinFont = (data) => {
    const view = new DataView(data);
    return view.byteLength > 2 && view.getUint8(0) == 77 && view.getUint8(1) == 90;
}
const generateHeader = (identifier, fileName, isText, fileType, outputType, data) => {
    let result = "";
    const isGfx = (outputType!=undefined && outputType.length>0 && outputType != "C");
    const guard = identifier.toUpperCase() + ((isGfx)?"_HPP":"_H");
    const impl = identifier.toUpperCase() + "_IMPLEMENTATION";
    result += "// Automatically generated by https://honeythecodewitch.com/gfx/generator\r\n";
    result += `// #define ${impl} in exactly one translation unit (.c/.cpp file) before including this header\r\n`
    result += `#ifndef ${guard}\r\n`;
    result += `#define ${guard}\r\n`;
    if (!isText) {
        result += "#include <stdint.h>\r\n";
    }
    let isSpecialized = false;
    let isFon = false;
    let isVlw = false;
    let isJpg = false;
    let isPng = false;
    if (isGfx) {
        if (fileType == undefined || fileType == "" && fileName.toLowerCase().endsWith(".fon")) {
            isFon = checkIsWinFont(data);
            isSpecialized = isFon;
        } else if (fileType == "image/jpeg") {
            isJpg = true;
            isSpecialized = true;
        } else if (fileType == "image/png") {
            isPng = true;
            isSpecialized = true;
        } else if (fileName.toLowerCase().endsWith(".vlw")) {
            isVlw = true;
            isSpecialized = true;
        }
        if (isFon) {
            result += "#include \"gfx_win_font.hpp\"\r\n\r\n";
            result += `extern gfx::win_font ${identifier};\r\n`
        } else if (isVlw) {
            result += "#include \"gfx_vlw_font.hpp\"\r\n\r\n";
            result += `extern gfx::vlw_font ${identifier};\r\n`
        } else if (isJpg) {
            result += "#include \"gfx_jpg_image.hpp\"\r\n\r\n";
            result += `extern gfx::jpg_image ${identifier};\r\n`
        } else if (isPng) {
            result += "#include \"gfx_png_image.hpp\"\r\n\r\n";
            result += `extern gfx::png_image ${identifier};\r\n`
        } else {
            result += "#include \"gfx_core.hpp\"\r\n\r\n";
            result += `extern gfx::const_buffer_stream ${identifier};\r\n`;
        }
    } else {
        if (isText) {
            const view = new DataView(data);
            result += `#define ${identifier.toUpperCase()}_LENGTH (${view.byteLength})\r\n`;
            result += "#ifdef __cplusplus\r\nextern \"C\"\r\n#else\r\nextern\r\n#endif\r\n";
            result += `const char* ${identifier};\r\n`;
        } else {
            result += `const uint8_t ${identifier}[];\r\n`;
        }
    }
    result += `#endif // ${guard}\r\n\r\n`;
    result += `#ifdef ${impl}\r\n`;
    if (isGfx) {
        if (isText) {
            result += generateStringLiteral(identifier + "_data", data, true) + "\r\n\r\n";
        } else {
            result += generateByteArrayLiteral(identifier + "_data", data, true) + "\r\n\r\n";
        }
        if(isSpecialized) {
            result += `static gfx::const_buffer_stream ${identifier}_stream(${identifier}_data,sizeof(${identifier}_data));\r\n`;
        }
        if (isFon) {
            result += `gfx::win_font ${identifier}(${identifier}_stream);\r\n`;
        } else if (isVlw) {
            result += `gfx::vlw_font ${identifier}(${identifier}_stream);\r\n`;
        } else if (isJpg) {
            result += `gfx::jpg_image ${identifier}(${identifier}_stream);\r\n`;
        } else if (isPng) {
            result += `gfx::png_image ${identifier}(${identifier}_stream);\r\n`;
        } else {
            if (isText) {
                const view = new DataView(data);
                result += `gfx::const_buffer_stream ${identifier}((const uint8_t*)${identifier}_data,${view.byteLength});\r\n`;
            } else {
                result += `gfx::const_buffer_stream ${identifier}(${identifier}_data,sizeof(${identifier}_data));\r\n`;
            }
        }
    } else {
        if (isText) {
            result += generateStringLiteral(identifier, data, false) + "\r\n";
        } else {
            result += generateByteArrayLiteral(identifier, data, false) + "\r\n";
        }
    }
    result += `#endif // ${impl}\r\n`;
    return result;
}
const getDownloadName = (ident, genType) => {
    if (genType == "C") {
        return `${ident}.h`;
    }
    return `${ident}.hpp`;
}
const HeaderGenerator = () => {
    let downloadUrl = "";
    var gencache;
    const [fileInfo, setFileInfo] = useState("");
    //const [fileType, setFileType] = useState("");
    const [ident, setIdent] = useState("");
    const [genType, setGenType] = useState("");
    const [generated,setGenerated] = useState("genstate");

    const handleFileChange = (e) => {
        setFileInfo({ file: e.target.files[0], type: e.target.files[0].type });
        setIdent(toIdentifier(e.target.files[0].name));
        gencache = undefined;
        setGenerated(undefined);
    
    };
    const handleIdentChange = (e) => {
        if(ident!=e.target.value) {
            setIdent(e.target.value);
            gencache = undefined;
            setGenerated(undefined);
        }
    }
    const handleTypeChange = (e) => {
        if(genType!=e.target.value) {
            setGenType(e.target.value);
            gencache = undefined;
            setGenerated(undefined);
        }
    }
    const generateContentClip = () => {
        if (!gencache && !generated && fileInfo.file) {
            let reader = new FileReader();
            reader.readAsArrayBuffer(fileInfo.file);
            reader.onload = async function (evt) {
                const isText = (fileInfo.type.endsWith("/json") || fileInfo.type.endsWith("/xml") || fileInfo.type.endsWith("+xml") || fileInfo.type.startsWith("text/"));
                gencache=generateHeader(ident, fileInfo.file.name, isText, fileInfo.type, genType, evt.target.result);
                setGenerated(gencache);
                await navigator.clipboard.writeText(gencache);
            }
        }
    }
    const setGeneratedFileUrl = () => {
        const blb = new Blob([generated], { type: "text/plain" });
        if (downloadUrl != undefined && downloadUrl.length > 0) {
            URL.revokeObjectURL(downloadUrl);
        }
        const alink = document.getElementById("downloadLink");
        downloadUrl = URL.createObjectURL(blb);
        if (alink) {
            if (alink.href != "#") {
                URL.revokeObjectURL(alink.href);
            }
            alink.href = downloadUrl;
        }
    }
    const generateContentFile = () => {
        if (!gencache && !generated && fileInfo.file) {
            let reader = new FileReader();
            reader.readAsArrayBuffer(fileInfo.file);
            reader.onload = function (evt) {
                const isText = (fileInfo.type.endsWith("/json") || fileInfo.type.endsWith("/xml") || fileInfo.type.endsWith("+xml") || fileInfo.type.startsWith("text/"));
                gencache=generateHeader(ident, fileInfo.file.name, isText, fileInfo.type, genType, evt.target.result);
                setGenerated(gencache);
                setGeneratedFileUrl();       
            }
        } else if(generated) {
            setGeneratedFileUrl();
        }
    }
    const onDropFiles = (e) => {
        e.preventDefault();
        const inputFile = document.getElementById("file");
        inputFile.files = e.dataTransfer.files;
        setFileInfo({ file: e.dataTransfer.files[0], type: e.dataTransfer.files[0].type });
        setIdent(toIdentifier(e.dataTransfer.files[0].name));
        gencache = undefined;
        setGenerated(undefined);
    }
    return (
        <div id="drop-target" onDrop={onDropFiles} className={"border-drag"} onDragOver={(event) => event.preventDefault()}>
            <p>Select or drag a file here</p>
            <div className="input-group">
                <table border="0">
                    <tbody>
                        <tr>
                            <td colSpan={2}><input id="file" type="file" onChange={handleFileChange} /></td>
                        </tr>
                        <tr>
                            <td><label>Type</label></td>
                            <td>
                                <select id="type" value={genType} onChange={handleTypeChange}>
                                    <option value="C">Raw C/++</option>
                                    <option value="GFX2">GFX 2.x</option>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td><label>Identifier: </label></td><td><input type="text" id="identifier" value={ident} onChange={handleIdentChange} /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            {fileInfo && (
                <section>
                    File details:
                    <ul>
                        <li>Name: {fileInfo.file.name}</li>
                        {fileInfo.file.type && (
                            <li>Type: {fileInfo.file.type}</li>)}
                        <li>Size: {fileInfo.file.size} bytes</li>
                    </ul>

                </section>
            )}

            {fileInfo && (
                <>
                    <a id="downloadLink" href="#" onClick={generateContentFile} download={getDownloadName(ident, genType)}
                        className="submit"
                    >Download header file</a><br />
                    <a href="#"
                        onClick={generateContentClip}
                        className="submit"
                    >Copy to clipboard</a>
                </>
            )}
        </div>
    );
};

export default HeaderGenerator;
